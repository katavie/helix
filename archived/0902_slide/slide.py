import math
import matplotlib.pyplot as plt

# hydropathy values for each amino acid
table = {'I': 4.5, 'V': 4.2, 'L': 3.8, 'F': 2.8, 'C': 2.5, 'M': 1.9, 'A': 1.8, 'G': -0.4, 'T': -0.7, 'W': -0.9, 'S': -0.8, 'Y': -1.3, 'P': -1.6, 'H': -3.2, 'E': -3.5, 'D': -3.5, 'N': -3.5, 'Q': -3.5, 'K': -3.9, 'R': -4.5}

# sequences and a-helix fractions for 10 proteins (top 5, bottom 5; ranked by a-helix fractions) from Sreerama 1999 study
proteins = {
	'4mbn': {
		'fasta': 'VLSEGEWQLVLHVWAKVEADVAGHGQDILIRLFKSHPETLEKFDRFKHLKTEAEMKASEDLKKHGVTVLTALGAILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISEAIIHVLHSRHPGDFGADAQGAMNKALELFRKDIAAKYKELGYQG',
		'frac': 0.804
	},
	'2mhb': {
		'fasta': 'VLSAADKTNVKAAWSKVGGHAGEYGAEALERMFLGFPTTKTYFPHFDLSHGSAQVKAHGKKVGDALTLAVGHLDDLPGALSDLSNLHAHKLRVDPVNFKLLSHCLLSTLAVHLPNDFTPAVHASLDKFLSSVSTVLTSKYRVQLSGEEKAAVLALWDKVNEEEVGGEALGRLLVVYPWTQRFFDSFGDLSNPGAVMGNPKVKAHGKKVLHSFGEGVHHLDNLKGTFAALSELHCDKLHVDPENFRLLGNVLVVVLARHFGKDFTPELQASYQKVVAGVANALAHKYH',
		'frac': 0.760
	},
	'2hmz': { # 4 identical chains
		'fasta': 'GFPIPDPYCWDISFRTFYTIIDDEHKTLFNGILLLSQADNADHLNELRRCTGKHFLNEQQLMQASQYAGYAEHKKAHDDFGFPIPDPYCWDISFRTFYTIIDDEHKTLFNGILLLSQADNADHLNELRRCTGKHFLNEQQLMQASQYAGYAEHKKAHDDFGFPIPDPYCWDISFRTFYTIIDDEHKTLFNGILLLSQADNADHLNELRRCTGKHFLNEQQLMQASQYAGYAEHKKAHDDFGFPIPDPYCWDISFRTFYTIIDDEHKTLFNGILLLSQADNADHLNELRRCTGKHFLNEQQLMQASQYAGYAEHKKAHDDF',
		'frac': 0.675
	},
	'2lzm': {
		'fasta': 'MNIFEMLRIDEGLRLKIYKDTEGYYTIGIGHLLTKSPSLNAAKSELDKAIGRNCNGVITKDEAEKLFNQDVDAAVRGILRNAKLKPVYDSLDAVRRCALINMVFQMGETGVAGFTNSLRMLQQKRWDEAAVNLAKSRWYNQTPNRAKRVITTFRTGTWDAYKNL',
		'frac': 0.665
	},
	'3tim': { # 2 identical chains
		'fasta': 'MSKPQPIAAANWKCNGSQQSLSELIDLFNSTSINHDVQCVVASTFVHLAMTKERLSHPKFVIAAQNAIAKSGAFTGEVSLPILKDFGVNWIVLGHSERRAYYGETNEIVADKVAAAVASGFMVIACIGETLQERESGRTAVVVLTQIAAIAKKLKKADWAKVVIAYEPVWAIGTGKVATPQQAQEAHALIRSWVSSKIGADVRGELRILYGGSVNGKNARTLYQQRDVNGFLVGGASLKPEFVDIIKATQMSKPQPIAAANWKCNGSQQSLSELIDLFNSTSINHDVQCVVASTFVHLAMTKERLSHPKFVIAAQNAIAKSGAFTGEVSLPILKDFGVNWIVLGHSERRAYYGETNEIVADKVAAAVASGFMVIACIGETLQERESGRTAVVVLTQIAAIAKKLKKADWAKVVIAYEPVWAIGTGKVATPQQAQEAHALIRSWVSSKIGADVRGELRILYGGSVNGKNARTLYQQRDVNGFLVGGASLKPEFVDIIKATQ',
		'frac': 0.446
	},
	'2ctv': {
		'fasta': 'ADTIVAVELDTYPNTDIGDPSYPHIGIDIKSVRSKKTAKWNMQNGKVGTAHIIYNSVDKRLSAVVSYPNADSATVSYDVDLDNVLPEWVRVGLSASTGLYKETNTILSWSFTSKLKSNSTHETNALHFMFNQFSKDQKDLILQGDATTGTDGNLELTRVSSNGSPQGSSVGRALFYAPVHIWESSAVVASFEATFTFLIKSPDSHPADGIAFFISNIDSSIPSGSTGRLLGLFPDAN',
		'frac': 0.038
	},
	'1rei': { # 2 identical chains
		'fasta': 'DIQMTQSPSSLSASVGDRVTITCQASQDIIKYLNWYQQTPGKAPKLLIYEASNLQAGVPSRFSGSGSGTDYTFTISSLQPEDIATYYCQQYQSLPYTFGQGTKLQITDIQMTQSPSSLSASVGDRVTITCQASQDIIKYLNWYQQTPGKAPKLLIYEASNLQAGVPSRFSGSGSGTDYTFTISSLQPEDIATYYCQQYQSLPYTFGQGTKLQIT',
		'frac': 0.028
	},
	'1tnf': { # 3 identical chains
		'fasta': 'VRSSSRTPSDKPVAHVVANPQAEGQLQWLNRRANALLANGVELRDNQLVVPSEGLYLIYSQVLFKGQGCPSTHVLLTHTISRIAVSYQTKVNLLSAIKSPCQRETPEGAEAKPWYEPIYLGGVFQLEKGDRLSAEINRPDYLLFAESGQVYFGIIALVRSSSRTPSDKPVAHVVANPQAEGQLQWLNRRANALLANGVELRDNQLVVPSEGLYLIYSQVLFKGQGCPSTHVLLTHTISRIAVSYQTKVNLLSAIKSPCQRETPEGAEAKPWYEPIYLGGVFQLEKGDRLSAEINRPDYLLFAESGQVYFGIIALVRSSSRTPSDKPVAHVVANPQAEGQLQWLNRRANALLANGVELRDNQLVVPSEGLYLIYSQVLFKGQGCPSTHVLLTHTISRIAVSYQTKVNLLSAIKSPCQRETPEGAEAKPWYEPIYLGGVFQLEKGDRLSAEINRPDYLLFAESGQVYFGIIAL',
		'frac': 0.019
	},
	'2sod': { # 4 identical chains; X entries what do I doooo
		'fasta': 'XATKAVCVLKGDGPVQGTIHFEAKGDTVVVTGSITGLTEGDHGFHVHQFGDNTQGCTSAGPHFNPLSKKHGGPKDEERHVGDLGNVTADKNGVAIVDIVDPLISLSGEYSIIGRTMVVHEKPDDLGRGGNEESTKTGNAGSRLACGVIGIAKXATKAVCVLKGDGPVQGTIHFEAKGDTVVVTGSITGLTEGDHGFHVHQFGDNTQGCTSAGPHFNPLSKKHGGPKDEERHVGDLGNVTADKNGVAIVDIVDPLISLSGEYSIIGRTMVVHEKPDDLGRGGNEESTKTGNAGSRLACGVIGIAKXATKAVCVLKGDGPVQGTIHFEAKGDTVVVTGSITGLTEGDHGFHVHQFGDNTQGCTSAGPHFNPLSKKHGGPKDEERHVGDLGNVTADKNGVAIVDIVDPLISLSGEYSIIGRTMVVHEKPDDLGRGGNEESTKTGNAGSRLACGVIGIAKXATKAVCVLKGDGPVQGTIHFEAKGDTVVVTGSITGLTEGDHGFHVHQFGDNTQGCTSAGPHFNPLSKKHGGPKDEERHVGDLGNVTADKNGVAIVDIVDPLISLSGEYSIIGRTMVVHEKPDDLGRGGNEESTKTGNAGSRLACGVIGIAK',
		'frac': 0.018
	},
	'2abx': { # 2 identical chains
		'fasta': 'IVCHTTATIPSSAVTCPPGENLCYRKMWCDAFCSSRGKVVELGCAATCPSKKPYEEVTCCSTDKCNHPPKRQPGIVCHTTATIPSSAVTCPPGENLCYRKMWCDAFCSSRGKVVELGCAATCPSKKPYEEVTCCSTDKCNHPPKRQPG',
		'frac': 0.000
	}
}

# to be populated by sliding scale
disparities = []
pdb = ''

def slide( PDB, sectionLength ):
	global pdb # in order to modify global var
	pdb = PDB
	seq = proteins[pdb]['fasta']

	# iterate through protein sequence to get starting resdiues of each window
	for i, slideStart in enumerate( seq[0 : len(seq) - sectionLength - 1] ):

		# variables to be populated
		hydro = []
		sumX = 0
		sumY = 0

		# from the starting residue, iterate through next n-1 residues, n=sectionLength
		for n, residue in enumerate( seq[ i : i + sectionLength - 1 ] ):

			# map residue to hydropathy value
			hydro.append(table[residue])

			# represent top-down view of helix as circle
			positionX = math.cos( math.radians(-100*n) ) # n starts at 0
			positionY = math.sin( math.radians(-100*n) )

			sumX += hydro[n] * positionX
			sumY += hydro[n] * positionY

		vectorLength = math.sqrt(sumX**2 + sumY**2) # distance formula

		disparities.append(vectorLength / float( sectionLength ))

	print(pdb + ' ' + str(sectionLength))
	print(disparities)

slide('4mbn', 15)

plt.style.use('ggplot')
plt.figure(1, figsize=(7.5,9))

plt.subplot(211) # numrows, numcols, fignum
plt.plot(disparities)
plt.gca().set_ylim([0, 2.25])

plt.title( 'Sliding Scale (15): ' + pdb + ' (' + str(proteins[pdb]['frac']) + ' a-helix)')
plt.ylabel('Average Disparity')
plt.xlabel('First Residue in Window')

disparities = [] # clear
slide('4mbn', 18)

plt.subplot(212)
plt.plot(disparities)
plt.gca().set_ylim([0, 2.25])

plt.title('Sliding Scale (18): ' + pdb + ' (' + str(proteins[pdb]['frac']) + ' a-helix)')
plt.ylabel('Average Disparity')
plt.xlabel('First Residue in Window')

plt.tight_layout(pad=1.0, h_pad=3.0)
plt.figure(1).savefig(pdb + '.graph.png')
plt.show()