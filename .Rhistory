library(caret)
set.seed(500)
setwd('C:/Users/Jan_Huang/Desktop/helix_grindtime')
data <- read.csv('dataset.csv')
maxdisps <- as.matrix(read.delim('maxdisparities.txt', header=FALSE))
data$maxdisp <- maxdisps
data <- data[!(is.na(data$maxdisp)), ] # remove rows with NA in maxdisp column
randnums <- sample(x=1:nrow(data))
data$randnum <- randnums
write.csv(data, 'dataset_disp_rand.csv')
index <- sample(x = 1:nrow(data), size = round(0.75 * nrow(data))) # indices of observations to be included in train set, drawing w/o replacement by default
train <- data[index,]
test <- data[-index,] # rows that train didn't include
model <- glm(ie ~ gc + nstart + maxnstop, family = 'binomial', train)
p <- predict(model, test, type='response')
summary(p)
p_class <- ifelse(p > .50, 1, 0)
confusionMatrix(p_class, test[['ie']])
View(data)
model <- glm(ie ~ gc + nstart + maxnstop + maxdisp + randnum, family = 'binomial', train)
p <- predict(model, test, type='response')
summary(p)
p_class <- ifelse(p > .50, 1, 0)
confusionMatrix(p_class, test[['ie']])
pred.A <- prediction(p, test$ie)
ROC.A <- performance(pred.A, measure='tpr', x.measure='fpr')
library(ROCR)
pred.A <- prediction(p, test$ie)
ROC.A <- performance(pred.A, measure='tpr', x.measure='fpr')
plot(ROC.A)
plot(ROC.A, main='ROC')
p_class <- ifelse(p > .60, 1, 0)
confusionMatrix(p_class, test[['ie']])
p_class <- ifelse(p > .55, 1, 0)
confusionMatrix(p_class, test[['ie']])
correlationMatrix <- cor(data[,3:7])
print(correlationMatrix)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
(highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5))
print(highlyCorrelated)
importance <- varImp(model, scale=FALSE)
print(importance)
plot(importance)
View(importance)
control <- rfeControl(functions=rfFuncs, method='cv', number=10)
results <- rfe(data[,3:7], data[,2], sizes=c(3:7), rfeControl=control)
install.packages(randomForest)
install.packages('randomForest')
results <- rfe(data[,3:7], data[,2], sizes=c(3:7), rfeControl=control)
warnings()
print(results)
predictors(results)
plot(results, type=c('g', 'o'))
