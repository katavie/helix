install.packages('caTools')
library(caTools)
setwd('C:/Users/Jan_Huang/Desktop/helix_grindtime')
data <- read.csv('dataset.csv')
index <- sample(x = 1:nrow(data), size = round(0.75 * nrow(data))) # indices of observations to be included in train set, drawing w/o replacement by default
train <- data[index,]
test <- data[-index,] # rows that train didn't include
model <- glm(ie ~ gc + nstart + maxnstop, family = 'binomial', train)
p <- predict(model, test, type='response')
summary(p)
p_class <- ifelse(p > .50, 1, 0)
confusionMatrix(p_class, test[['ie']])
library(caret)
data <- read.csv('dataset.csv')
index <- sample(x = 1:nrow(data), size = round(0.75 * nrow(data))) # indices of observations to be included in train set, drawing w/o replacement by default
train <- data[index,]
test <- data[-index,] # rows that train didn't include
model <- glm(ie ~ gc + nstart + maxnstop, family = 'binomial', train)
set.seed(500)
data <- read.csv('dataset.csv')
index <- sample(x = 1:nrow(data), size = round(0.75 * nrow(data))) # indices of observations to be included in train set, drawing w/o replacement by default
train <- data[index,]
test <- data[-index,] # rows that train didn't include
model <- glm(ie ~ gc + nstart + maxnstop, family = 'binomial', train)
p <- predict(model, test, type='response')
summary(p)
p_class <- ifelse(p > .50, 1, 0)
confusionMatrix(p_class, test[['ie']])
colAUC(p, test, plotROC = TRUE)
colAUC(p, test$ie, plotROC = TRUE)
install.packages('ROCR')
library(ROCR)
plot(performance(p, test$ie))
plot(performance(p, measure = "tpr", x.measure = "fpr"))
?colAUC
plot(colAUC(p, test$ie))
plot(colAUC(p, test$ie))
plot(colAUC(p, test$ie, plotROC = TRUE))
p
confusionMatrix(p_class, test[['ie']])
p_class <- ifelse(p > .70, 1, 0)
confusionMatrix(p_class, test[['ie']])
p_class <- ifelse(p > .80, 1, 0)
confusionMatrix(p_class, test[['ie']])
p_class <- ifelse(p > .60, 1, 0)
confusionMatrix(p_class, test[['ie']])
str(p)
?predict
p_class
pred <- data.frame(p, test$ie)
View(pred)
plot(performance(pred, measure='tpr', x.measure='fpr'))
pred <- c(p, test$ie)
plot(performance(pred, measure='tpr', x.measure='fpr'))
p <- predict(model, test, type='numerical')
p <- predict(model, test, type='terms')
response
p <- predict(model, test, type='response')
pred <- prediction(c(0.1,.5,.3,.8,.9,.4,.9,.5), c(0,0,0,1,1,1,1,1))
plot(performance(pred, measure='tpr', x.measure='fpr'))
pred <- c(p, test$ie)
plot(performance(pred, measure='tpr', x.measure='fpr'))
pred <- data.frame(p, test$ie)
View(pred)
pred <- prediction(p, test$ie)
plot(performance(pred, measure='tpr', x.measure='fpr'))
pred.A <- prediction(p, test$ie)
plot(performance(pred.A, measure='tpr', x.measure='fpr'))
ROC.A <- plot(performance(pred.A, measure='tpr', x.measure='fpr'))
ROC.A <- performance(pred.A, measure='tpr', x.measure='fpr')
data <- read.csv('dataset.csv')
maxdisps <- as.matrix(read.delim('maxdisparities.txt', header=FALSE))
data$maxdisp <- maxdisps
data <- data[!(is.na(data$maxdisp)), ] # remove rows with NA in maxdisp column
index <- sample(x = 1:nrow(data), size = round(0.75 * nrow(data))) # indices of observations to be included in train set, drawing w/o replacement by default
train <- data[index,]
test <- data[-index,] # rows that train didn't include
model <- glm(ie ~ gc + nstart + maxnstop + maxdisp, family = 'binomial', train)
p <- predict(model, test, type='response')
pred.B <- prediction(p, test$ie)
ROC.B <- performance(pred.B, measure='tpr', x.measure='fpr')
plot(ROC.B)
plot(ROC.B, ROC.A)
plot(c(ROC.A, ROC.B))
View(data)
