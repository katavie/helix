data <- subset(data, select=c('seq', 'length', 'code', 'disp', 'GC'))
data <- read.csv('data.csv')
setwd('C:/Users/Jan_Huang/Desktop/helix_grindtime/by_secondary_structure')
data <- read.csv('data.csv')
data <- subset(data, select=c('seq', 'length', 'code', 'disp', 'GC'))
View(data)
disp <- as.matrix(read.csv('data_disp.csv'))
for (i in 1:nrow(disp)) {
data$disp[i] <- disp[i]
}
GC <- as.matrix(read.csv('data_GC.csv'))
for (i in 1:nrow(GC)) {
data$GC[i] <- GC[i]
}
View(data)
write.csv(data, 'data.csv')
ggplot(data=data, aes(x=data$GC, y=data$disp)) + geom_point(aes(GC, disp, color=code))
library(caret)
library(ggplot2)
ggplot(data=data, aes(x=data$GC, y=data$disp)) + geom_point(aes(GC, disp, color=code))
data$code <- as.factor(data$code)
ggplot(data=data, aes(x=data$GC, y=data$disp)) + geom_point(aes(GC, disp, color=code))
index <- sample(x = 1:nrow(data), size = round(0.75 * nrow(data))) # indices of observations to be included in train set, drawing w/o replacement by default
train <- data[index,] # 1486 observations
test <- data[-index,] # rows that train didn't include; 495 observations
model <- glm(code ~ gc + disp, family = 'binomial', train)
model <- glm(code ~ GC + disp, family = 'binomial', train)
p <- predict(model, test, type='response')
summary(p)
p_class <- ifelse(p > .50, 1, 0) # rn accuracy + sensitivity improve if condition is p>.55
confusionMatrix(p_class, test[['code']])
library(ROCR)
pred <- prediction(p, test$code)
ROC <- performance(pred, measure='tpr', x.measure='fpr')
plot(ROC, main='ROC')
?performance
ROC <- performance(pred, measure='tpr', x.measure='cutoff')
plot(ROC, main='ROC')
ggplot(ROC)
qplot(ROC)
plot(ROC, main='ROC')
tpr <- performance(pred, measure='tpr', x.measure='cutoff')
fpr <- performance(pred, measure='fpr', x.measure='cutoff')
plot(tpr, main='TPR and FPR vs Cutoff')
?plot
plot(tpr, main='TPR and FPR vs Cutoff')
plot(fpr, add=TRUE, colorize=TURE)
plot(fpr, add=TRUE, colorize=TRUE)
plot(fpr, main='TPR and FPR vs Cutoff')
plot(tpr, main='TPR and FPR vs Cutoff')
plot(fpr, add=TRUE)
?performance
?plot
plot(sens, main='Sensitivity and Specificity vs Cutoff', col)
sens <- performance(pred, measure='sens', x.measure='cutoff') # true positive rate
spec <- performance(pred, measure='spec', x.measure='cutoff') # true negative rate
plot(sens, main='Sensitivity and Specificity vs Cutoff', col)
plot(sens, main='Sensitivity and Specificity vs Cutoff', col='red')
plot(spec, add=TRUE, col='blue')
summary(sens)
sens$Cutoff
sens[[Cutoff]]
sens[Cutoff]
sens.x
sens$x
ggplot(sens)
plot(sens, main='Sensitivity and Specificity vs Cutoff', col='red', colorize=TRUE)
plot(sens, main='Sensitivity and Specificity vs Cutoff', col='red')
plot(spec, add=TRUE, col='blue')
plot(sens, main='Sensitivity and Specificity vs Cutoff', col='red', ylab='Sensitivity/Specificity')
plot(spec, add=TRUE, col='blue')
install.packages('plotROC')
library(plotROC)
?geom_roc
confusionMatrix(p_class, test[['code']])
(correlationMatrix <- cor(data[,5:6]))
(highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5))
importance <- varImp(model, scale=FALSE)
print(importance) # maxdisp is least important omg
plot(sens, main='Sensitivity and Specificity vs Cutoff', col='red', ylab='Sensitivity/Specificity')
plot(spec, add=TRUE, col='blue')
locator()
